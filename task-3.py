"""
ЗАДАНИЕ № 3
Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число).
В классе должны быть реализованы методы перегрузки арифметических операторов:
сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение
и целочисленное (с округлением до целого) деление клеток, соответственно.
Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
больше нуля, иначе выводить соответствующее сообщение.
Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как произведение количества
ячеек этих двух клеток.
Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
количества ячеек этих двух клеток.

В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
Тогда метод make_order() вернёт строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
Тогда метод make_order() вернёт строку: *****\n*****\n*****.
"""

from itertools import repeat
from math import ceil


class Cell:
    """ Класс Клетка """

    def __init__(self, cnt, init_correct=None):
        if init_correct is not None:
            self.__cnt = cnt
            self.correct = False
        else:
            self.correct = True
            if not str(cnt).isdigit:
                self.correct = False
                print("Количество ячеек клетки должно задаваться натуральным числом")
            if cnt <= 0:
                self.correct = False
                print("Число ячеек не может быть меньше или равно нулю")
            self.__cnt = cnt

    def __add__(self, other):
        return Cell(self.__cnt + other.__cnt)

    def __sub__(self, other):
        result = self.__cnt - other.__cnt
        if result > 0:
            return Cell(result)
        else:
            print("Ошибка. Разность количества ячеек двух клеток меньше или равно нулю")
            return Cell(1, False)

    def __mul__(self, other):
        return Cell(self.__cnt * other.__cnt)

    def __truediv__(self, other):
        if self.__cnt >= other.__cnt:
            return Cell(self.__cnt // other.__cnt)
        else:
            print("Ошибка. Левая клетка не может быть меньше правой")
            return Cell(1, False)

    def make_order(self, cnt_in_row=5):
        if self.correct:
            return ('\n'.join(repeat((''.join(repeat('*', cnt_in_row))),
                                 ceil(self.__cnt / cnt_in_row))))[:-(cnt_in_row - self.__cnt % cnt_in_row)]
        else:
            return "Некорректная клетка. Печать невозможна"


if __name__ == "__main__":
    cell_1 = Cell(8)
    cell_2 = Cell(10)
    cell_3 = Cell(7)
    cell_4 = Cell(2)

    print(f"1) Сложение клеток")
    cell_5 = cell_1 + cell_2  # 8 + 10
    print(cell_5.make_order(7))

    print(f"\n2) Вычитание клеток № 1")
    cell_6 = cell_1 - cell_2  # 8 - 10
    print(cell_6.make_order(4))

    print(f"\n3) Вычитание клеток № 2")
    cell_7 = cell_2 - cell_1  # 10 - 8
    print(cell_7.make_order(4))

    print(f"\n4) Умножение клеток")
    cell_8 = cell_3 * cell_4  # 7 * 2
    print(cell_8.make_order(4))

    print(f"\n5) Деление клеток № 1")
    cell_9 = cell_1 / cell_2  # 8 // 10
    print(cell_9.make_order(2))

    print(f"\n6) Деление клеток № 2")
    cell_10 = cell_2 / cell_4  # 10 // 2
    print(cell_10.make_order(3))
