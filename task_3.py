""""
ЗАДАНИЕ № 3

Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере. Запрашивать у пользователя данные и заполнять список необходимо
только числами. Класс-исключение должен контролировать типы данных элементов списка.
Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока пользователь сам не остановит
работу скрипта, введя, например, команду «stop».
При этом скрипт завершается, сформированный список с числами выводится на экран.

Подсказка: для этого задания примем, что пользователь может вводить только числа и строки.
Во время ввода пользователем очередного элемента необходимо реализовать проверку типа элемента.
Вносить его в список, только если введено число.
Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
При этом работа скрипта не должна завершаться.
"""


class NotOnlyDigitsError(ValueError):

    def __init__(self, txt):
        self.txt = txt

    def __str__(self):
        return self.txt

    @staticmethod
    def valid_value(val):
        # if val.isdigit():
        if val != "-0" and (len(val) == len([el for el in val if (ord(el) in range(48, 58)) or ord(el) == 45])):
            return True
        else:
            return False


if __name__ == "__main__":
    print("Введите элементы списка или stop для выхода:")
    lst = []
    inp = ""
    stop = "stop"
    while inp != stop:
        inp = input()
        try:
            if inp == "" or inp == stop:
                continue
            if NotOnlyDigitsError.valid_value(inp):
                lst.append(int(inp))
            else:
                raise NotOnlyDigitsError(f"Элемент '{inp}' не добавлен в список")
        except NotOnlyDigitsError as err:
            print(err)

    print(f"\nИтоговый список: {lst}")
